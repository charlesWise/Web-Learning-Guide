/**
 * 堆就是一个完全二叉树
 * 关键码：堆里进行比较堆值、对象key等
 * 最小堆任何一个父节点都小于左右两个子节点，最大堆相反。
 * 排序最小堆最小堆只关心父节点和左右子节点的关心，小于其中一个互换
 * insert插入最小堆将新堆元素插入到最小堆中由于此前最小堆已经建好，那么就可以从下向上与父节点堆关键码进行比较对调
 */

function MinHeap(size) {
  var head = new Array(size)
  var curr_size = 0
  var max_size = size
}

/**
 * 最小堆排序，因为父节点都是最小的每次删除堆顶
 * 一个非常大的数据集合，求集合最大的K个值：用最小堆（利用最小堆特性堆顶元素最小）来初始化一个大小为k堆最小堆先放入k个数剩余堆数依次和堆顶元素比较如果比堆顶大则删除堆顶元素并放入新的元素
 * 用最大堆求集合最小堆K个值
 */

/**
 * 哈夫曼树
 */